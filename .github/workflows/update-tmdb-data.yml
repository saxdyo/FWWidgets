name: Update TMDB Backdrop Data

on:
  schedule:
    # 每天北京时间早上8点执行 (UTC 0:00)
    - cron: '0 0 * * *'
  
  # 允许手动触发
  workflow_dispatch:
    inputs:
      force_update:
        description: '强制更新数据'
        required: false
        default: 'false'
        type: boolean

  # 当主分支有新提交时也触发（可选）
  push:
    branches: [ main ]
    paths:
      - 'tmdb-scraper.js'
      - '.github/workflows/update-tmdb-data.yml'

jobs:
  update-data:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: 安装依赖
      run: |
        npm ci --production
        # 如果package-lock.json不存在，使用npm install
        if [ ! -f package-lock.json ]; then
          npm install --production
        fi
    
    - name: 创建环境变量文件
      run: |
        echo "TMDB_API_KEY=${{ secrets.TMDB_API_KEY }}" > .env
        echo "MAX_MOVIES=100" >> .env
        echo "MAX_TV_SHOWS=50" >> .env
        echo "UPDATE_INTERVAL_HOURS=24" >> .env
    
    - name: 检查数据是否需要更新
      id: check_update
      run: |
        # 检查data目录是否存在
        if [ ! -d "data" ]; then
          echo "need_update=true" >> $GITHUB_OUTPUT
          echo "reason=数据目录不存在" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # 检查元数据文件是否存在
        if [ ! -f "data/tmdb-backdrops-metadata.json" ]; then
          echo "need_update=true" >> $GITHUB_OUTPUT
          echo "reason=元数据文件不存在" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # 检查文件最后修改时间
        if [ -f "data/tmdb-backdrops-metadata.json" ]; then
          # 获取文件的修改时间（秒）
          file_time=$(stat -c %Y "data/tmdb-backdrops-metadata.json" 2>/dev/null || stat -f %m "data/tmdb-backdrops-metadata.json")
          current_time=$(date +%s)
          time_diff=$((current_time - file_time))
          
          # 24小时 = 86400秒
          if [ $time_diff -gt 86400 ] || [ "${{ github.event.inputs.force_update }}" = "true" ]; then
            echo "need_update=true" >> $GITHUB_OUTPUT
            echo "reason=数据已过期或强制更新" >> $GITHUB_OUTPUT
          else
            echo "need_update=false" >> $GITHUB_OUTPUT
            echo "reason=数据仍然新鲜" >> $GITHUB_OUTPUT
          fi
        else
          echo "need_update=true" >> $GITHUB_OUTPUT
          echo "reason=元数据文件不存在" >> $GITHUB_OUTPUT
        fi
    
    - name: 运行数据更新脚本
      if: steps.check_update.outputs.need_update == 'true'
      run: |
        echo "🚀 开始更新TMDB数据..."
        echo "更新原因: ${{ steps.check_update.outputs.reason }}"
        node tmdb-scraper.js
      env:
        TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
    
    - name: 检查是否有变更
      if: steps.check_update.outputs.need_update == 'true'
      id: check_changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "📋 检测到以下变更:"
          git status --porcelain
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "📋 没有检测到变更"
        fi
    
    - name: 提交并推送变更
      if: steps.check_update.outputs.need_update == 'true' && steps.check_changes.outputs.has_changes == 'true'
      run: |
        # 配置Git用户信息
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 添加所有变更
        git add data/
        
        # 生成提交信息
        TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
        COMMIT_MSG="🤖 自动更新TMDB背景图数据 - ${TIMESTAMP}"
        
        # 如果有元数据文件，添加统计信息
        if [ -f "data/tmdb-backdrops-metadata.json" ]; then
          TOTAL_ITEMS=$(node -p "JSON.parse(require('fs').readFileSync('data/tmdb-backdrops-metadata.json')).totalItems")
          COMMIT_MSG="${COMMIT_MSG}

📊 数据统计:
- 总计项目: ${TOTAL_ITEMS} 个
- 更新时间: ${TIMESTAMP}
- 触发原因: ${{ steps.check_update.outputs.reason }}

🔗 数据来源: TMDB (The Movie Database)"
        fi
        
        # 提交变更
        git commit -m "${COMMIT_MSG}"
        
        # 推送到远程仓库
        git push origin main
        
        echo "✅ 数据已成功更新并推送到仓库"
    
    - name: 生成更新报告
      if: steps.check_update.outputs.need_update == 'true'
      run: |
        echo "## 📊 TMDB数据更新报告" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**更新时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "**更新原因**: ${{ steps.check_update.outputs.reason }}" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "data/tmdb-backdrops-metadata.json" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 数据统计" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 读取元数据并生成报告
          node -e "
            const fs = require('fs');
            const metadata = JSON.parse(fs.readFileSync('data/tmdb-backdrops-metadata.json'));
            console.log('- **总计项目**: ' + metadata.totalItems + ' 个');
            console.log('- **包含背景图**: ' + metadata.statistics.withBackdrop + ' 个');
            console.log('- **平均评分**: ' + metadata.statistics.averageRating.toFixed(1));
            console.log('- **电影数量**: ' + metadata.statistics.movies + ' 部');
            console.log('- **电视剧数量**: ' + metadata.statistics.tvShows + ' 部');
            console.log('');
            console.log('### 📁 分类统计');
            console.log('');
            console.log('- **热门电影**: ' + metadata.categories.popularMovies + ' 部');
            console.log('- **热门电视剧**: ' + metadata.categories.popularTVShows + ' 部');
            console.log('- **今日热门**: ' + metadata.categories.trendingContent + ' 项');
            console.log('- **高分内容**: ' + metadata.categories.topRatedContent + ' 项');
          " >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.check_changes.outputs.has_changes }}" = "true" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **状态**: 数据已成功更新并提交到仓库" >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ℹ️ **状态**: 数据已更新，但没有检测到变更" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: 跳过更新通知
      if: steps.check_update.outputs.need_update == 'false'
      run: |
        echo "## ℹ️ TMDB数据更新跳过" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**原因**: ${{ steps.check_update.outputs.reason }}" >> $GITHUB_STEP_SUMMARY
        echo "**检查时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "数据仍然是最新的，无需更新。" >> $GITHUB_STEP_SUMMARY

    - name: 清理
      if: always()
      run: |
        # 清理敏感文件
        rm -f .env
        echo "🧹 清理完成"